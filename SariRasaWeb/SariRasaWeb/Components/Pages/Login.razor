@page "/login"
@layout SariRasaWeb.Components.Layout.UnauthedLayout
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using SariRasaWeb.Data
@using SariRasaWeb.Models
@using Microsoft.EntityFrameworkCore;
@using Color = MudBlazor.Color
@using BC = BCrypt.Net.BCrypt;

<PageTitle>Login</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-items-center min-vh-100">
    <MudPaper Class="pa-4 mb-8 d-flex flex-column justify-content-center align-items-center w-100" Elevation="3">
        <div class="flex-column d-flex align-items-center justify-content-center">
            <MudImage Src="/images/logo-SR.jpeg" Class="rounded-circle profile-image" Width="180" Height="180"></MudImage>
            @* <h1 class="h4 poppins-regular">Sari Rasa</h1> *@
        </div>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="d-flex flex-column gap-3 w-100">
            <MudTextField T="string" Label="Username" @ref="userNameField" @bind-Value="userName" />
            <MudTextField T="string" Label="Password" HelperText="Choose a strong password" Class="mt-3" InputType="@PasswordInput" @ref="pwField" @bind-Value="userPass" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonVisibilityClick" AdornmentAriaLabel="Show Password" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto rounded-3" FullWidth="true" OnClick="(() => OnSubmit())">Log In</MudButton>
        </MudForm>
        <MudLink Class="mt-4" Href="/change-password">Change password</MudLink>
    </MudPaper>
</MudContainer>


@inject AppDbContext dbContext
@inject ISnackbar Snackbar
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavManager
@code {
    private List<DateTime> markedDates = new List<DateTime>();
    List<MCustomer> customers = new List<MCustomer>();

    bool success;
    string[] errors = { };
    MudTextField<string> pwField;
    MudTextField<string> userNameField;
    string userName = "";
    string userPass = "";
    string ktp = "";
    MudForm form;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonVisibilityClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    protected override async Task OnInitializedAsync()
    {
        customers = await dbContext.MCustomer.ToListAsync();
    }

    private void addSnackbar(string message, Severity severity = Severity.Error)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add(message, severity);
    }

    public async Task OnSubmit()
    {
        var customer = await dbContext.MCustomer.Where(c => c.UserName == userName).FirstOrDefaultAsync();
        if (customer == null)
        {
            addSnackbar("User not found");
            return;
        }
        if (!BC.Verify(userPass, customer.UserPass))
        {
            addSnackbar("Invalid username or password");
            return;
        }

        var token = SariRasaWeb.Utils.Auth.GenerateToken(customer.UserName);

        await ProtectedSessionStore.SetAsync("token", token);

        addSnackbar("Logged In", Severity.Success);

        NavManager.NavigateTo("/");
    }
}
