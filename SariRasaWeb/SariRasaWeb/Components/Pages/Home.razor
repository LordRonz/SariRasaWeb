@page "/"
@using Microsoft.EntityFrameworkCore;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using SariRasaWeb.Data
@using SariRasaWeb.Models
@using Color = MudBlazor.Color
@using Transition = MudBlazor.Transition
@using Size = MudBlazor.Size

<PageTitle>Home</PageTitle>

@if (loaded)
{
    <MudPaper Class="pa-4 mb-8" Elevation="3">
        <div class="d-flex align-items-center gap-4">
            <MudImage Src="/images/profile.jpg" Class="rounded-circle profile-image" Width="80" Height="80"></MudImage>
            <div>
                <h2 class="h4">Hello @userName</h2>
                <h3 class="h6 text-danger">Jumlah Point</h3>
                <h3 class="h6">130</h3>
            </div>
        </div>
    </MudPaper>
    <MudPaper Class="pa-4 mb-8" Elevation="3" Style="background: rgb(248, 246, 204)">
        <div class="d-flex align-items-center justify-content-center gap-4">
            <div>
                <h3 class="h4 m-0">Kartu Member</h3>
            </div>
            <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Error" Href="/card">Lihat Kartu</MudButton>
        </div>
    </MudPaper>
    <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Whatsapp" Label="Order Melalui Whatsapp" />
    @if (promosi.Length > 0)
    {
        <MudCarousel Class="mud-width-full mt-8" Style="height:400px;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
            @foreach (MPromosi p in promosi)
            {
                <MudCarouselItem Transition="transition">
                    <div class="d-flex justify-content-center" style="height:100%">
                        <MudImage Src="@GetPromosiLink(p.Promosi)" Alt="Promosi" Elevation="25" Class="rounded-lg" />
                    </div>
                </MudCarouselItem>
            }
        </MudCarousel>
    }
}
else
{
    <MudContainer Class="d-flex justify-content-center align-items-center vh-100">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    </MudContainer>
}


@inject AppDbContext dbContext
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavManager
@code {
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
    private bool loaded = false;

    string userName = "";
    MPromosi[] promosi = [];

    private string GetPromosiLink(string slug)
    {
        return $"images/{slug}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            var token = await ProtectedSessionStore.GetAsync<string>("token");
            if (!token.Success)
            {
                NavManager.NavigateTo("/login");
                return;
            }
            var authPayload = SariRasaWeb.Utils.Auth.ValidateToken(token.Value);
            if (authPayload == null)
            {
                NavManager.NavigateTo("/login");
                return;
            }

            userName = SariRasaWeb.Utils.Auth.GetSubFromSecurityToken(authPayload);
            loaded = true;
            var now = DateTime.Now;
            promosi = await dbContext.MPromosi.Where(t => t.TGLAwal <= now && t.TGLAkhir >= now).OrderByDescending(t => t.Promosi).ToArrayAsync();

            StateHasChanged();
        }
    }
}
